version: "3.8"

services:
  dev_prometheus:
    build: ./prometheus
    image: dev_prometheus
    container_name: dev_prometheus_container
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"

  dev_node-exporter:
    image: prom/node-exporter
    container_name: dev_node_exporter_container
    ports:
      - "9100:9100"

  dev_grafana:
    image: grafana/grafana
    container_name: dev_grafana_container
    volumes:
      - /hostpath/provisioning:/etc/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - 9000:3000

  dev_cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: dev_cadvisor_container
    ports:
      - "8080:8080"  # cAdvisor의 웹 인터페이스에 접근하기 위한 포트
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - /:/rootfs:ro # 호스트 시스템의 루트 디렉토리를 읽기 전용으로 마운트
      - /var/run:/var/run:rw # Docker 소켓 위치
      - /sys:/sys:ro # 시스템 정보를 읽기 위한 마운트
      - /var/lib/docker/:/var/lib/docker:ro # Docker 이미지와 컨테이너 정보
      - /sys/fs/cgroup:/sys/fs/cgroup:ro # cgroup 정보를 위한 볼륨 마운트 추가

  dev_backend:
    build: ./backend
    image: dev_backend
    container_name: dev_backend_container
    ports:
      - "3001:3000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - CLOVA_CLIENT_ID=${CLOVA_CLIENT_ID}
      - CLOVA_CLIENT_SECRET=${CLOVA_CLIENT_SECRET}
    volumes:
      - log-data:/usr/src/app/logs
      # log-data 볼륨과 /usr/src/app/logs라는 dev_backend 컨테이너 내부 경로를
      # 마운팅(링크로 연결)하여 *.log 파일들을 공유

  dev_frontend:
    build: ./frontend
    image: dev_frontend
    container_name: dev_frontend_container
    ports:
      - "5001:5000"

  dev_nginx:
    build: ./nginx
    image: dev_nginx
    container_name: dev_nginx_container
    # restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /hostpath/www:/var/www/html
      - /hostpath/certbot/etc:/etc/letsencrypt:ro
    depends_on:
      - dev_backend
      - dev_frontend

  certbot:
    image: certbot/certbot
    container_name: dev_certbot_container
    volumes:
      - /hostpath/certbot/etc:/etc/letsencrypt
      - /hostpath/certbot/var:/var/lib/letsencrypt
      - /hostpath/www:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email tjfgkssk9472@gmail.com --agree-tos --no-eff-email --force-renewal -d tairot.online -v
    depends_on:
      - nginx

  # ELK Stack 관련 Services
  # .env에 ELASTIC_VERSION=7.17.11 추가
  elasticsearch:
    build: 
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # env_file: .env
    volumes:
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      # - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node

  logstash:
    build: 
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # env_file: .env
    ports:
      - "5044:5044"
      # - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    build: 
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    # env_file: .env
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  filebeat:
    # platform: linux/amd64 # 관련 오류 발생 시 주석 풀고 시도해보기(아마 MAC에서만 발생하는 오류같음,,)
    build: 
      context: filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - type: volume # nodejs 에서 OS에 남겨둔 로그를 filebeat에서 공유하여 logstash:5044로 보낼예정 
        source: log-data
        target: /var/log/server
        # log-data 볼륨과 /var/log/server라는 filebeat 컨테이너 내부 경로를
        # 마운팅(링크로 연결)하여 *.log 파일들을 공유
    command: filebeat -e -strict.perms=false
    depends_on:
      - logstash

volumes:
  grafana_data:
  elasticsearch:
  log-data:
